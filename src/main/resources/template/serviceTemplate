package com.whtr.eam.@moduleName.service;

import org.nutz.ioc.loader.annotation.IocBean;

import com.whtr.eam.common.entity.@VoClassName;
import com.whtr.eam.common.service.BaseService;
import com.whtr.eam.common.util.PageModel;
import com.whtr.eam.common.util.SqlConditionUtils;
import org.apache.commons.lang3.StringUtils;
import org.nutz.dao.Cnd;
import org.nutz.dao.entity.Record;
import org.nutz.dao.pager.Pager;
import org.nutz.dao.sql.Sql;
import java.util.List;
import java.util.Map;

/**
 * @author GeneratorTool
 * @date
 *
 */
 @IocBean
public class @VoClassNameService extends BaseService<@VoClassName> {

      /**
       * 分页查询
       */
       public PageModel<Record> queryByPage (Map<String, String> params, int pageNumber, int pageSize) {
           Cnd cnd = Cnd.NEW();
           buildConditionByParams(params, cnd);

           // 从SQL资源文件中加载sql
           Sql sql = createSql("SQL_KEY");  //请自行设置SQL_KEY
           // 设置排序条件
           setOrderBy(params, cnd,"ORDER_KEY","DESC");  //请自行设置ORDER_KEY
           // 设置动态查询条件
           sql.setCondition(cnd);

           // 查询记录总数
           int recordCount = searchCountBySql(sql);

           // 设置分页属性
           sql.setPager(createPager(pageNumber, pageSize));

           // 设置查询结果集
           basicDao.getDao().execute(sql);

           List<Record> list = sql.getList(Record.class);

           return new PageModel<>(list, recordCount, pageNumber, pageSize);
       }

       /**
        * 拼接查询条件
        */
       @queryCon

      /**
       * 保存对象
       */
       public void save(@VoClassName t){
           basicDao.getDao().insert(t);
       }

       /**
        * 更新对象
        */
       public void update(@VoClassName t){
           basicDao.getDao().update(t);
       }

//       public int deleteByIds(Class<?> clazz, String field, int[] ids) {
//            Criteria criteria = Cnd.cri();
//            criteria.where().andInIntArray(field, ids);
//            return dao.clear(clazz, criteria);
//       }

        /**
         * 根据多个id删除对象,ids为","分隔的id字符串
         */
        public int deleteByIds(Class<?> clazz, String field, String ids) {
             Criteria criteria = Cnd.cri();
             criteria.where().andInIntArray(field, ids.split(","));
             return dao.clear(clazz, criteria);
        }

        /**
         * 根据id查找对象
         */
        public @VoClassName find(int id){
             return dao.fetch(@VoClassName.class,id);
        }

}